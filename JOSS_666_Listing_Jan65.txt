A---E000+    A  0 100 0000 000,0000     TERMINATION SIGNAL
A---E001     A  1 000 0000 001,6001     1
A---E002     A  2 000 0000 001,6002     2
A---E003     A  3 000 0000 001,5003     3
A---E004     A  4 000 0000 001,6004     4
A---E005     A  5 000 0000 001,5005     5
A---E006     A  6 000 0000 001,5006     6
A---E007     A  7 000 0000 001,4007     7
A---E008     A  8 000 0000 001,6010     8
A---E009     A  9 000 0000 001,5011     9
A---E010     A 10 000 0000 000,3161
A---E011     A 11 000 0000 000,3161
A---E012     A 12 000 0000 000,3161
A---E013     A 13 000 0000 000,3161
A---E014     A 14 000 0000 000,4016     SPACE
A---E015     A 15 000 0000 000,3161
A---E016     A 16 000 0000 000,6020     SEMICOLON
A---E017     A 17 001 V  1 002,5021     LCA
A---E018     A 18 002 V  2 002,5022     LCB
A---E019     A 19 003 V  3 002,4023     LCC
A---E020     A 20 004 V  4 002,5024     LCD
A---E021     A 21 005 V  5 002,4025     LCE
A---E022     A 22 006 V  6 002,4026     LCF
A---E023     A 23 007 V  7 002,3027     LCG
A---E024     A 24 010 V  8 002,5030     LCH
A---E025     A 25 011 V  9 002,4031     LCI
A---E026     A 26 000 0000 000,3161
A---E027     A 27 000 0000 000,3033     .
A---E028     A 28 000 0000 000,3161
A---E029     A 29 000 0000 000,3161
A---E030     A 30 000 0000 000,3036     EJECT+CR+EOM
A---E031     A 31 000 0000 000,2037     EJECT+CR
A---E032     A 32 000 = 33 240,6040     MULTIPLY DOT
A---E033     A 33 012 V 10 002,5041     LCJ
A---E034     A 34 013 V 11 002,5042     LCK
A---E035     A 35 014 V 12 002,4043     LCL
A---E036     A 36 015 V 13 002,5044     LCM
A---E037     A 37 016 V 14 002,4045     LCN
A---E038     A 38 017 V 15 002,4046     LCO
A---E039     A 39 020 V 16 002,3047     LCP
A---E040     A 40 021 V 17 002,5050     LCQ
A---E041     A 41 022 V 18 002,4051     LCR
A---E042     A 42 100 0000 000,4052     CR+EOM+TERMINAL SIGNAL IN SIGN
A---E043     A 43 002 0000 004,3053     =
A---E044     A 44 000 = 32 140,4054     -
A---E045     A 45 100 0000 000,3416     SPECIAL SPACE
A---E046     A 46 000 0000 000,3161
A---E047     A 47 000 0000 000,3161
A---E048     A 48 000 0000 001,5060     ZERO
A---E049     A 49 000 = 34 240,4061     /
A---E050     A 50 023 V 19 002,4062     LCS
A---E051     A 51 024 V 20 002,3063     LCT
A---E052     A 52 025 V 21 002,4064     LCU
A---E053     A 53 026 V 22 002,3065     LCV
A---E054     A 54 027 V 23 002,3066     LCW

A---E055     A 55 030 V 24 002,2067     LCX
A---E056     A 56 031 V 25 002,4070     LCY
A---E057     A 57 032 V 26 002,3071     LCZ
A---E058     A 58 000 0000 000,3161
A---E059     A 59 000 0000 000,2073     ,
A---E060     A 60 000 = 31 140,3074     +
A---E061     A 61 000 0000 000,2075     TAB
A---E062     A 62 000 0000 000,3161
A---E063     A 63 000 0000 000,3161
A---E064     A 64 000 0000 000,3161
A---E065     A 65 000 0000 000,5101     PRIME
A---E066     A 66 000 0000 000,5102     QUOTE MARKS
A---E067     A 67 000 0000 000,4016     STRIKE OUT CHARACTER = SPACE
A---E068     A 68 000 0000 000,5104     $
A---E069     A 69 003 0000 004,4105     LESS THAN OR =
A---E070     A 70 006 0000 004,4106     GREATER THAN OR =
A---E071     A 71 001 0000 004,3107     LESS THAN
A---E072     A 72 004 0000 004,5110     GREATER THAN
A---E073     A 73 000 A112 020,4111     (
A---E074     A 74 000 0000 000,3161
A---E075     A 75 000 0000 000,3161
A---E076     A 76 000 0000 000,3161
A---E077     A 77 000 0000 000,3161
A---E078     A 78 000 0000 000,3161
A---E079     A 79 000 0000 000,3161
A---E080     A 80 000 0000 000,5120     COLON
A---E081     A 81 041 V 27 002,4121     A
A---E082     A 82 042 V 28 002,4122     B
A---E083     A 83 043 V 29 002,3123     C
A---E084     A 84 044 V 30 002,4124     D
A---E085     A 85 045 V 31 002,3125     E
A---E086     A 86 046 V 32 002,3126     F
A---E087     A 87 047 V 33 002,2127     G
A---E088     A 88 050 V 34 002,4130     H
A---E089     A 89 051 V 35 002,3131     I
A---E090     A 90 000 0000 000,3161
A---E091     A 91 000 A123 010,2133     RIGHT BRACKET
A---E092     A 92 000 0000 000,3161
A---E093     A 93 000 0000 000,3161
A---E094     A 94 000 0000 000,3161
A---E095     A 95 000 0000 000,3161
A---E096     A 96 000 A 96 030,5140     ABS VAL BAR
A---E097     A 97 052 V 36 002,4141     J
A---E098     A 98 053 V 37 002,4142     K
A---E099     A 99 054 V 38 002,3143     L
A---E100     A100 055 V 39 002,4144     M
A---E101     A101 056 V 40 002,3145     N
A---E102     A102 057 V 41 002,3146     O
A---E103     A103 060 V 42 002,2147     P
A---E104     A104 061 V 43 002,4150     Q
A---E105     A105 062 V 44 002,3151     R
A---E106     A106 000 0000 002,3161
A---E107     A107 005 0000 004,2153     NOT =
A---E108     A108 000 0000 000,3154     UNDERSCORE
A---E109     A109 000 0000 000,2433     PERIOD WITH FLAG (CHAR 155 CAN'T GET IN)

A---E110     A110 000 0000 000,3161
A---E111     A111 000 0000 000,3161
A---E112     A112 000 A 73 010,4160     )
A---E113     A113 000 0000 000,3161     QUESTION MARK
A---E114     A114 063 V 45 002,3162     S
A---E115     A115 064 V 46 002,2163     T
A---E116     A116 065 V 47 002,3164     U
A---E117     A117 066 V 48 002,2165     V
A---E118     A118 067 V 49 002,2166     W
A---E119     A119 070 V 50 002,1167     X
A---E120     A120 071 V 51 002,3170     Y
A---E121     A121 072 V 52 002,2171     Z
A---E122     A122 000 0000 000,3161
A---E123     A123 000 A091 020,1173     LEFT BRACKET
A---E124     A124 000 = 35 440,2174     *
A---E125     A125 000 0000 000,1175     TAB
A---E126     A126 000 0000 000,3161
A---E127     A127 000 0000 000,3161
A---E128     A128 000 0000 000,0037     EJECT
A---E129     A129 000 0000 000,0056     CARRIAGE RETURN
A---E130     A130 000 0000 000,0155     PSEUDO PERIOD
A---E131     A131 000 0000 000,0055     PSEUDO SPACE


D000E000+       $              M  0     BODY OF ERROR ROUTINE
D000E010     *  1 020 S  0 050 P 12     SET POINTER
D000E015          020 P 18 124 K  6
D000E020          025 * 90 050 T  0
D000E025          024 * 91 052 *  6
D000E030          021 T  0 002 *  8     JUMP IF EO
D000E035          072   21 050 P 18
D000E040          020 Q  8 002 * 23     JUMP IF INDIRECT
D000E045          020 P 18 024 I  6
D000E050          050 T  0 023 T  0
D000E055          002 *  8 010 * 24     JUMP IF DIRECT AND E6
D000E060     * 23 020 P 23 001 * 24     JUMP UNLESS TROUBLE IN X7
D000E062          021 T  0 024 K  2
D000E064          001 * 24 010 $  1     JUMP IF NOT OVERFLOW IN X7
D000E066          020 $  0 010 = 13     POP Q3
D000E068          014 X  7              BACK TO X7 IGNORING OVERFLOW
D000E070     * 24 020 $  0 010 = 64     'ERROR-'
D000E080              * 81     * 81
D000E085          020 Q  8 001 *  4     JUMP IF AT TOP LEVEL
D000E090          020 P 23 001 *  2     JUMP IF NO TROUBLE IN X7
D000E100          020 $  0 010 = 64     'DURING-'
D000E110              * 82     * 82
D000E120          020 Q  8 024 K  1
D000E125          056 *  9 014 *  9
D000E130     *  9          020 ----
D000E135          001 *  4 050 P 21     JUMP IF TROUBLE IN TOP LEVEL DO-FOR
D000E140          010 *  3
D000E160     *  2 020 $  0 010 = 64     'AT-'
D000E170              * 83     * 83
D000E180     *  3 020 $  0 010 = 64
D000E190              * 84     * 84     'STEP-'
D000E200          020 K  4 050 P 16     CLEAR P16
D000E205          020 P 23 002 * 10     JUMP IF TROUBLE IN X7
D000E210          020 Q  9 050 P 21
D000E220     * 10 020 $  0 010 = 51     FIND STEP
D000E230          001 *  7 056 P  3
D000E240          020 $  0 010 =  7     UNPACK
D000E242          020 J 12 050 P  2     COPY STEP NUMBER FROM R TO S
D000E244     * 31 020 $  0 010 =  2
D000E246          124 K 35 025 K 35
D000E248          002 * 32 010 $  1
D000E250          020 P  1 124 A 27
D000E252          025 A 27 001 *  5
D000E254     * 32 020 P 12 024 K  3
D000E256          050 P 12 056 * 33
D000E258     * 33 020 P  1 050 ----
D000E260          020 * 31 010 =  1
D000E270     *  4 020 $  0 010 = 64     'ABOVE'
D000E280              * 85     * 85
D000E290     *  5 020 $  0 010 = 64     COLON AND TWO SPACES
D000E300              * 86     * 86
D000E302          020 P 18 024 I  2
D000E304          050 T  0 023 T  0
D000E306          002 * 94 010 $  1     JUMP IF E2

D000E310     *  8 004 H 31 110 * 80
D000E320     *  6 004 ---- 110 * 80
D000E330          020 $  0 010 = 64     ERROR MESSAGE
D000E340              * 80     * 80
D000E350          010 * 11
D000E360     *  7 020 S  0 050 P 12
D000E365          020 $  0 010 = 64     'IT'S A MESS.  LET'S START OVER.'
D000E370              * 87     * 87
D000E380          020 Q  8 001 * 22     JUMP IF NO CONTROL STRUCTURE
D000E385     * 21 020 $  0 010 = 76     ERASE ONE LEVEL OF CONTROL STRUCTURE
D000E390          020 Q  8 002 * 21     LOOP IF MORE
D000E395     * 22 020 K  4 050 P 23     RESET P23 FLAG
D000E400     * 11 020 Q  2 001 * 12     CLEAN UP OPERAND STACK
D000E410          020 $  0 010 = 13
D000E420          010 * 11
D000E430     * 12 020 Q  4 001 * 13     CLEAN UP OPERATOR STACK
D000E440          020 $  0 010 = 15
D000E450          010 * 12
D000E460     * 13 020 Q  6 001 * 14     CLEAN UP AUXILIARY STACK
D000E470          020 $  0 010 = 17
D000E480          010 * 13
D000E490     * 14 020 Q 14 052 * 15     CLEAN UP Q14
D000E500     * 15 020 ---- 005 * 16
D000E510          052 * 15 071   40
D000E520          020 $  0 010 = 29
D000E530     * 16 010 * 15 004 Q 14
D000E540          020 $  0 010 = 28
D000E550          120    0 050 Q 14
D000E560          004 Q 16 010 $  1     CLEAN UP Q15
D000E570          020 $  0 010 = 29
D000E580          120    0 050 Q 15
D000E590          020 Q  1 002 * 20
D000E600          020 Q  0 056 * 17     REFILL SPARE TANK
D000E610     * 17 050 Q  1 020 ----
D000E620          056 * 18 004 K  4
D000E630     * 18 056 * 19 020 ----
D000E640     * 19 050 Q  0 060 ----
D000E650     * 20 010 X 12              EXIT TO TRANSMIT AND SWITCH
D000E680     * 80                       ERROR MSG INDEX AND TEXT BLOCK
D000E690        $              $ 31
D000E700     * 81 062,4511,222,3051     'ERROR-'
D000E710          007,2000,000,0000
D000E720     * 82 012,0641,221,4445     'DURING-'
D000E730          013,4161,000,0000
D000E740     * 83 010,4630,350,0000     'AT-'
D000E750     * 84 031,0630,522,3416     'STEP-'
D000E760          100,0000,000,0000
D000E770     * 85 010,4221,142,2425     'ABOVE'
D000E780          100,0000,000,0000
D000E790     * 86 050,0160,350,0000     COLON AND TWO SPACES
D000E800     * 87 054,4632,023,1016     'IT'S A MESS. LET'S START OVER.'
D000E810          010,4161,101,2462
D000E820          031,0330,340,7143
D000E830          012,4632,023,1016
D000E840          031,0630,422,4463

D000E850          007,0461,521,2451
D000E860          015,4524,000,0000
D000E870     * 90     E  0
D000E880     * 91     * 80
D000E900     * 94 020 H 27 050 P 11     CONSTRUCT UNDEFINED MESSAGE
D000E902          020 $  0 010 = 66     PLACE LETTER
D000E904          020 H 28 001 *  8     JUMP IF NO INDICES TO COMPLETE MESSAGE
D000E906          072   12 050 H 20
D000E908          020 J 20 052 * 96     =77 LEFT RIGHT GROUPER IN J20
D000E909     * 96 020 ---- 050 P 11
D000E910          020 $  0 010 = 66     PLACE LEFT GROUPER
D000E912          020 $  0 010 = 36     CONVERT FIRST INDEX
D000E914                 1        2
D000E916          020 H 29 001 * 95     JUMP IF NOT SECOND INDEX
D000E918          072   12 050 H 20
D000E920          020 A 59 050 P 11
D000E922          020 $  0 010 = 66     PLACE COMMA
D000E924          020 $  0 010 = 36     CONVERT SECOND INDEX
D000E926                 1        2
D000E928     * 95 020 J 20 050 P 11     =77 LEFT RIGHT GROUPER IN J20
D000E930          020 $  0 010 = 66     PLACE RIGHT GROUPER
D000E932          010 *  8         ,    JUMP BACK TO COMPLETE MESSAGE
D000E999        /     D  0 010,7000/


D001E000+       $              M  0     BRANCH OF G5 DELETE
D001E010          020 P  1 124 K 19
D001E020          025 K 19 002 * 40     JUMP IF TERMINAL
D001E030          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
D001E040          020 P  1 124 K 19
D001E050          025 K 19 002 * 40     JUMP IF TERMINAL
D001E060          020 $  0 010 = 27     ACCUMULATE WORD
D001E070          020 $  0 010 =  3     ELIMINATE SPACES
D001E080          124 K 19 025 K 19
D001E090          001 $  1 004 H 19     MALFORMED IF NOT TERMINAL
D001E100          020 W 12 065 T  0
D001E110          023 T  0 002 * 10     JUMP IF 'VALUES'
D001E120          020 W 10 065 T 00
D001E130          023 T 00 002 * 20     JUMP IF 'STEPS'
D001E140          020 W  8 065 T  0
D001E150          023 T  0 002 * 20     JUMP IF 'PARTS'
D001E160          020 W  4 065 T  0
D001E170          023 T  0 002 * 30     JUMP IF 'FORMS'
D001E180          010 E  6              ELSE MALFORMED
D001E190     * 10 020 $  0 010 * 50     ERASE ALL VALUES
D001E200          010 X  5
D001E210     * 20 020 Q  8 002 E  9     ERASE ALL STEPS (OR PARTS) - ILLEGAL
D001E220          020 $  0 010 * 60
D001E230          010 X  5
D001E240     * 30 020 Q  8 002 E  9     ERASE ALL FORMS - ILLEGAL INDIRECT
D001E250          020 $  0 010 * 70
D001E260          010 X  5
D001E270     * 40 020 Q  8 002 E  9     ERASE ALL - ILLEGAL INDIRECT
D001E280          020 $  0 010 * 50
D001E290          020 $  0 010 * 60
D001E300          020 $  0 010 * 70
D001E310          010 X  5
D001E320     * 50 024 K  2 052 * 59     ERASE ALL VALUES (SUBROUTINE)
D001E330          020 * 58 052 * 51
D001E340     * 51 020 ---- 050 H 27
D001E350          124 K 34 025 K 34
D001E360          001 * 52 010 $  1
D001E370          020 $  0 010 = 75
D001E380     * 52 020 * 51 024 K  2
D001E390          052 * 51 020 H 27
D001E400          124 A121 025 A121
D001E410     * 59 002 ---- 010 * 51
D001E420     * 58     A 17
D001E430     * 60 024 K  2 052 * 69     ERASE ALL STEPS (SUBROUTINE)
D001E440          020 Q 10 050 * 90
D001E450     * 61 020 * 90 056 * 62
D001E460          124 K  5 025 K  1
D001E470     * 62 005 * 66 020 ----
D001E480          050 * 90 050 * 91
D001E490     * 63 020 * 91 052 * 64
D001E500          124 K  6 025 K  1
D001E510          005 * 65 010 $  1
D001E520     * 64 004 ---- 060 * 91
D001E530          020 $  0 010 = 29

D001E540     * 65 010 * 63 004 * 90
D001E550          020 $  0 010 = 28
D001E560     * 66 010 * 61 004 Q 10
D001E570          020 $  0 010 = 29
D001E580          120    0 050 Q 10
D001E582          020 Q 12 001 * 69     JUMP IF NO SUSPENDED TASK
D001E584          050 Q  8 020 K  4
D001E586          050 Q 12 050 Q 13
D001E588          050 P 17 050 P 23     RESET P17 AND P23 FLAGS
D001E590     * 67 020 $  0 010 = 76     ERASE ONE LEVEL
D001E592          020 Q  8 002 * 67
D001E600     * 69 010 ----
D001E610     * 70 024 K  2 052 * 79     ERASE ALL FORMS (SUBROUTINE)
D001E620          020 Q 11 050 * 91
D001E630     * 71 020 * 91 052 * 72
D001E640          124 K  6 025 K  1
D001E650          005 * 73 010 $  1
D001E660     * 72 004 ---- 060 * 91
D001E670          020 $  0 010 = 29
D001E680     * 73 010 * 71 004 Q 11
D001E690          020 $  0 010 = 28
D001E700          120    0 050 Q 11
D001E710     * 79 010 ----
D001E720     * 90                       LOCAL STORAGE
D001E730     * 91                  ,    LOCAL STORAGE
D001E999        /     D001 010,7000/


D002E000+       $              M  0     BRANCH OF G5 DELETE
D002E005          020 $  0 010 * 70     BORROW SPARE TANK
D002E010     *  0 020 P  1 124 K 34
D002E020          025 K 34 001 E  6     VERIFY LETTER
D002E030          020 P  1 050 H 27     SAVE IT
D002E040          020 $  0 010 =  1     ADVANCE ONE
D002E050          020 P  1 124 K 31
D002E060          025 K 31 002 *  1     JUMP IF LEFT GROUPER
D002E070          020 $  0 010 =  3     ELIMINATE SPACES
D002E080          020 $  0 010 = 12     PUSH Q3
D002E090          020 K  4 050 H 28
D002E100          050 H 29 010 $  1
D002E102          020 H 27 052 * 22
D002E104     * 22 022 ---- 002 *  3     JUMP IF VALUE FOUND
D002E106          010 E  2              ELSE ERROR
D002E110     *  1 020 H 27 050 * 90     SAVE LETTER
D002E120          020 $  0 010 = 26     EVALUATE SUBSCRIPTS
D002E130          020 * 90 050 H 27     SET UP LETTER AGAIN
D002E140          020 Q  7 050 H 29
D002E150          020 Q  6 001 *  2     JUMP IF Q7 EMPTY
D002E160          020 $  0 010 = 17     POP Q7
D002E170          020 Q  6 002 E  6     MALFORMED IF EXTRA INDICES
D002E180     *  2 020 $  0 010 = 41     CHECK AND CONVERT FIRST INDEX
D002E190          020 Q  3 050 H 28     SET UP FIRST INDEX
D002E200          020 H 29 002 * 21     JUMP IF DOUBLE INDEXED
D002E201          020 H 27 052 * 23
D002E202     * 23 020 ---- 002 E  2
D002E203          071    6 002 E  2
D002E204          020 $  0 010 = 71
D002E205          002 *  3 010 E  2
D002E210     * 21 050 Q  3 010 $  1
D002E220          020 $  0 010 = 41     CHECK AND CONVERT SECOND INDEX
D002E230          020 Q  3 050 H 29     SET UP SECOND INDEX
D002E232          020 $  0 010 = 72     FIND VALUE
D002E234          002 $  1 010 E  2     JUMP IF FOUND, ELSE ERROR
D002E240     *  3 020 H 27 124 K 17     PACK INFO INTO Q3 FOR LATER DELETE
D002E250          050 Q  3 020 H 28
D002E260          001 *  4 024 K 26
D002E270          024 Q  3 050 Q  3
D002E280          020 H 29 001 *  4
D002E290          071    9 024 K 26
D002E300          024 Q  3 050 Q  3
D002E310     *  4 020 P  1 124 A 59
D002E320          025 A 59 001 *  5     JUMP IF NOT COMMA
D002E330          020 $  0 010 =  2     ADVANCE TO NONSPACE
D002E340          010 *  0              LOOP BACK
D002E350     *  5 020 $  0 010 =  3     ELIMINATE SPACES
D002E360          124 K 19 025 K 19     VERIFY TERMINAL
D002E370          001 E  6 010 $  1
D002E380     *  6 020 Q  3 024 J 13     UNPACK AND DELETE
D002E390          056 *  7 010 $  1
D002E400          020 K  4 050 H 28
D002E410     *  7 050 H 29 020 ----
D002E420          050 H 27 020 Q  3

D002E430          025 K 26 002 *  8     JUMP IF INDEXED
D002E440          020 $  0 010 = 75     DELETE VALUE(S) FOR LETTER
D002E450          010 * 19
D002E460     *  8 124 K 42 050 H 28
D002E470          020 Q  3 025 K 26
D002E480          024 K 26 002 * 13     JUMP IF DOUBLE INDEX
D002E490          020 H 27 052 * 14     SINGLE INDEX
D002E500     * 14 020 ---- 002 * 19     JUMP IF NOT A VECTOR
D002E510          071    6 002 * 19
D002E520          020 $  0 010 = 71     FIND VALUE
D002E530          001 * 19 010 $  1     JUMP IF CAN'T
D002E540     * 20 020 H 21 056 *  9
D002E550          020 H 22 056 * 10
D002E560     *  9 020 H 23 056 ----
D002E570     * 10 020 Q  0 050 ----
D002E580          020 H 22 124 K  5
D002E590          050 Q  0 020 H 27
D002E600          052 * 11 052 * 12
D002E610     * 11 020 ---- 124 K  5
D002E620          025 K  1 020 * 19     JUMP IF DONE
D002E630          020 K  4 010 $  1
D002E640     * 12 050 ---- 010 * 19     UNDEFINE LETTER IF NO VALUES AND JUMP
D002E650     * 13 070    9 124 K 42     DOUBLE INDEX
D002E660          050 H 29 010 $  1
D002E670          020 H 27 052 * 15
D002E680     * 15 020 ---- 002 * 19     JUMP IF NOT A MATRIX
D002E690          071    5 002 * 19
D002E700          020 $  0 010 = 72     FIND VALUE
D002E710          001 * 19 020 H 24     JUMP IF CAN'T
D002E720          052 * 16 020 H 25
D002E730          052 * 17 020 H 26
D002E740     * 16 052 ---- 020 Q  0
D002E750     * 17 050 ---- 020 H 25
D002E760          070   21 050 Q  0
D002E770          020 H 22 056 * 18
D002E780     * 18 020 K  6 124 ----
D002E790          025 K  1 001 * 20     JUMP IF NO MORE VALUES IN ROW
D002E800     * 19 020 $  0 010 = 13     POP Q3
D002E810          020 Q  2 002 *  6     LOOP IF MORE TO DELETE
D002E815          020 $  0 010 * 80     REFILL SPARE TANK
D002E820          010 X  5              EXIT
D002E830     * 70 024 K  2 052 * 79     BORROW SPARE TANK (SUBROUTINE)
D002E835          020 Q  1 056 * 71
D002E840     * 71          020 ----
D002E845          056 * 72 010 $  1
D002E850     * 72 020 Q  0 050 ----
D002E855          020 Q  1 050 Q  0
D002E860          020 K  4 050 Q  1
D002E865     * 79 010 ----
D002E870     * 80 024 K  2 052 * 89     REFILL SPARE TANK
D002E875          020 Q  0 056 * 81
D002E880     * 81 050 Q  1 020 ----
D002E885          056 * 82 004 K  4
D002E890     * 82 056 * 83 020 ----
D002E895     * 83 050 Q  0 060 ----

D002E900     * 89 010 ----
D002E910     * 90                  ,    LOCAL STORAGE
D002E999        /     D002 010,7000/


D003E000+       $              M  0     EXTENSION OF G6 FOR 'ALL ----'
D003E010          020 $  0 010 =  3     ELIMINATE SPACES
D003E020          020 P  1 124 K 19
D003E030          025 K 19 002 * 10     JUMP IF TERMINAL
D003E040          020 $  0 010 = 27     ACCUMULATE WORD
D003E050          020 $  0 010 =  3     ELIMINATE SPACES
D003E060          124 K 19 025 K 19     VERIFY TERMINAL
D003E070          001 E  6 004 H 19
D003E080          020 W 10 065 T  0
D003E090          023 T  0 002 * 20     JUMP IF 'STEPS'
D003E100          020 W  8 065 T  0
D003E110          023 T  0 002 * 20     JUMP IF 'PARTS'
D003E120          020 W  4 065 T  0
D003E130          023 T  0 002 * 30     JUMP IF 'FORMS'
D003E140          020 W 12 065 T  0
D003E150          023 T  0 002 * 40     JUMP IF 'VALUES'
D003E160          010 E  6              ELSE MALFORMED OR ILLEGAL
D003E170     * 10 020 $  0 010 * 50     TYPE ALL (STEPS FIRST)
D003E180          020 $  0 010 * 60     THEN FORMS
D003E190          010 D  4              THEN WADE INTO D4 FOR VALUES
D003E200     * 20 020 $  0 010 * 50     TYPE ALL STEPS (OR PARTS)
D003E210          010 X  5
D003E220     * 30 020 $  0 010 * 60     TYPE ALL FORMS
D003E230          010 X  5
D003E240     * 40 010 D  4              WADE INTO D4 FOR VALUES
D003E250     * 50 024 K  2 052 P 26     TYPE ALL STEPS (SUBROUTINE)
D003E260          020 Q 10 050 P 18     INITIALIZE P18
D003E270     * 51 020 A 42 050 S  1
D003E280          020 $  0 010 = 78     LINE FEED
D003E290          020 P 18 056 * 52
D003E300     * 52          020 ----
D003E310          001 P 26 050 P 18     EXIT VIA P26 WHEN DONE
D003E320          050 P 19 010 $  1
D003E330     * 53 020 P 19 052 * 54     TYPE STEPS WITHIN PART
D003E340     * 54 020 ---- 001 * 51
D003E350          050 P 19 056 P  3
D003E360          020 $  0 014 =  7     UNPACK TO S
D003E380          020 P 15 002 * 70     JUMP IF INTERRUPT SIGNAL
D003E390          020 $  0 010 = 78     TRANSMIT STEP
D003E400          010 * 53
D003E410     * 60 024 K  2 052 P 26     TYPE ALL FORMS (SUBROUTINE)
D003E420          020 Q 11 050 P 19
D003E430     * 61 020 A 42 050 S  1
D003E440          020 $  0 010 = 78     LINE FEED
D003E450          020 P 19 052 * 62
D003E460          024 K  2 052 * 63
D003E470          020 ---- 001 P 26     EXIT VIA P26 IF NO MORE FORMS
D003E480     * 62 050 P 19 056 P  3
D003E490          020 S  0 050 P 12     INITIALIZE OUTPUT STRING POINTER
D003E500          020 $  0 010 = 64     INSERT 'FORM' IN OUTPUT STRING
D003E510              * 66     * 66
D003E520          020 $  0 010 = 62     INSERT SPACE
D003E530     * 63 020 ---- 050 T  0
D003E540          124 K 13 050 T  1

D003E550          020 T  0 124 K 11
D003E560          070   10 050 T  2
D003E570          020 J 14 025 T  2
D003E580          052 * 64 010 $  1
D003E590          120    0 004 T  1
D003E600     * 64 044 ---- 060 H 20
D003E610          020 $  0 010 = 36     CONVERT FROM NUMBER TO OUTPUT STRING
D003E620                 1        9
D003E630          020 A 80 050 P 11     INSERT COLON
D003E640          020 $  0 010 = 66
D003E650          020 A 42 050 P 11     INSERT CR+EOM
D003E660          020 $  0 010 = 66
D003E670          020 P 15 002 * 70     JUMP IF INTERRUPT SIGNAL
D003E680          020 $  0 010 = 78     TRANSMIT FORM NUMBER LINE
D003E690          020 $  0 014 =  7     UNPACK TO S
D003E710          020 $  0 010 = 78     TRANSMIT FORM
D003E720          010 * 61              LOOP
D003E760     * 66 053,0461,222,2200     'FORM'
D003E770     * 70 020 H 12 024 K 32     FAKE AN 'RI'
D003E780          050 H  9 010 X 10,      IN H9 AND JUMP
D003E999        /     D003 010,7000/


D004E000+       $              M  0     EXTENSION OF G6 VIA D3 FOR 'ALL VALUE
D004E010          120    0 050 P 18     INITIALIZE PHASE TO 0
D004E015          020 A 42 050 S  1
D004E020          020 $  0 010 = 78     LINE FEED
D004E025     *  0 020 K  4 050 P 19     RESET LINE FEED FLAG
D004E030          020 * 90 050 P 20     INITIALIZE POINTER
D004E040     *  1 020 P 30 052 *  2
D004E050     *  2 020 ---- 050 H 27     PICK UP NEXT CHARACTER WORD
D004E060          052 *  3 124 K 34
D004E070          025 K 34 001 *  5     JUMP IF NOT LETTER
D004E080     *  3 020 ---- 050 H 30     PICK UP HEAD OR VALUE
D004E090          002 *  4 071    5     JUMP IF SCALAR
D004E100          001 * 20 071    1     JUMP IF MATRIX
D004E110          001 * 10 010 *  5     JUMP IF VECTOR ELSE UNDEFINED
D004E120     *  4 023 P 18 001 *  5     JUMP UNLESS SCALAR PHASE
D004E125          050 P 19 020 K  4     SET LF FLAG
D004E130          050 H 28 050 H 29
D004E140          020 $  0 010 * 50     TYPE SCALAR VALUE
D004E150     *  5 020 P 30 024 K  3     ADVANCE SCANNER
D004E152          050 P 30 025 * 91
D004E154          001 *  1 010 $  1     LOOP IF MORE
D004E156          020 P 19 001 *  6     JUMP IF NO LINE FEED FLAG
D004E158          020 A 42 050 S  1
D004E160          020 $  0 010 = 78     LINE FEED
D004E165     *  6 020 P 18 024 K 26     ADVANCE PHASE
D004E170          050 P 18 025 K 36
D004E175          001 *  0 010 X  5     JUMP IF MORE PHASES, ELSE EXIT
D004E180     * 10 020 P 18 071    6     VECTOR
D004E185          002 *  5 020 H 27     JUMP IF NOT VECTOR PHASE
D004E190          050 P 27 020 H 30
D004E200     * 11 050 P 28 020 P 28
D004E205          056 * 12 024 K  1
D004E210     * 12 056 * 13 020 ----
D004E215          001 * 30 010 $  1
D004E220          050 P 28 124 K 42
D004E230     * 13 050 H 28 020 ----
D004E235          050 H 30 010 $  1
D004E240          020 P 27 050 H 27
D004E245          020 K  4 050 H 29
D004E250          020 $  0 010 * 50     TYPE VECTOR ELEMENT
D004E255          014 * 11              LOOP
D004E260     * 20 020 P 18 071    5     MATRIX
D004E265          002 *  5 010 $  1
D004E270          020 H 27 050 P 27
D004E275          020 H 30 050 P 28
D004E280     * 21 020 P 28 056 * 22
D004E290     * 22          020 ----
D004E300          001 * 30 050 P 28
D004E310          050 P 29 010 $  1
D004E320     * 23 020 P 29 052 * 24
D004E330          024 K  2 052 * 25
D004E340     * 24 020 ---- 001 * 21
D004E350          050 P 29 124 K 42
D004E360          050 H 29 020 P 28

D004E370          124 K 42 050 H 28
D004E380          020 P 27 050 H 27
D004E390     * 25 020 ---- 050 H 30
D004E400          020 $  0 010 * 50     TYPE MATRIX ELEMENT
D004E410          010 * 23              LOOP
D004E420     * 30 020 A 42 050 S  1     LINE FEED
D004E430          020 $  0 010 = 78
D004E440          010 *  5              SAVE LINK
D004E500     * 50 050 P 31 010 $  1
D004E502          021 I  7 050 * 93
D004E504          020 H 28 001 * 53
D004E506          025 * 92 002 * 51
D004E508          020 I  3 014 * 51
D004E510     * 51 020 I  4 024 * 93
D004E512          050 * 93 010 $  1
D004E514          020 H 29 001 * 53
D004E516          025 * 92 002 * 52
D004E518          020 I  2 014 * 52
D004E520     * 52 020 I  3 024 * 93
D004E522          050 * 93 010 $  1
D004E524     * 53 020 S  0 050 P 12     INITIALIZE OUTPUT LINE
D004E526     * 69 020 * 93 002 * 54     JUMP WHEN ALL SPACES ARE IN
D004E528          024 I  1 050 * 93
D004E530          020 $  0 010 = 62     INSERT SPACE
D004E532          010 * 69              LOOP
D004E534     * 54 020 H 27 050 P 11
D004E536          020 $  0 010 = 66     INSERT LETTER
D004E538          020 H 28 001 * 56     JUMP IF NO SUBSCRIPTS
D004E540          020 A 73 050 P 11
D004E542          020 $  0 010 = 66     INSERT LEFT PARENTHESIS
D004E544          020 H 28 070   12
D004E546          050 H 20 010 $  1
D004E548          020 $  0 010 = 36     CONVERT FIRST SUBSCRIPT
D004E550                 1        2
D004E552          020 H 29 001 * 55     JUMP IF NOD 2ND SUBSCRIPT
D004E554          020 A 59 050 P 11
D004E556          020 $  0 010 = 66     INSERT COMMA
D004E558          020 H 29 070   12
D004E560          050 H 20 010 $  1
D004E562          020 $  0 010 = 36     CONVERT SECOND SUBSCRIPT
D004E564                 1        2
D004E566     * 55 020 A112 050 P 11
D004E568          020 $  0 010 = 66     INSERT RIGHT PAREN
D004E570     * 56 020 $  0 010 = 62     INSERT SPACE
D004E572          020 A 43 050 P 11
D004E574          020 $  0 010 = 66     INSERT '='
D004E576          020 $  0 010 = 62     INSERT SPACE
D004E578          020 H 30 124 K 11
D004E580          071    1 072   32
D004E582          050 * 94 024 I  3
D004E584          001 * 65 025 I  9     JUMP IF SCIENTIFIC NOTATION REQUIRED
D004E586          002 * 65 020 * 94     JUMP IF SCIENTIFIC NOTATION REQUIRED
D004E588          002 * 71 021 I  1     JUMP IF NEGATIVE XP
D004E589     * 71 025 I  6 050 * 93     SET SPACE COUNTER
D004E590          020 H 30 071    9

D004E592          002 * 57 020 * 93
D004E594          024 I  1 050 * 93     ALLOW FOR MINUS SIGN
D004E596     * 57 020 * 93 002 * 58
D004E598          024 K  1 050 * 93
D004E600          020 $  0 010 = 62     INSERT SPACE
D004E602          010 * 57
D004E604     * 58 020 H 30 124 K 12
D004E606          025 K 12 001 * 59     JUMP IF PLUS
D004E608          020 A 44 050 P 11
D004E610          020 $  0 010 = 66     INSERT MINUS SIGN
D004E612     * 59 020 * 94 001 * 62
D004E614          024 I  1 056 * 61
D004E616          020 J 14 025 * 94
D004E618          056 * 60 020 I  8
D004E620          025 * 94 056 * 62
D004E622          020 H 30 124 K 13
D004E624     * 60 071   40 044 ----
D004E626          050 * 94 060 H 20
D004E628          020 $  0 010 = 36     CONVERT INTEGRAL PART
D004E630     * 61        1     ----
D004E632          023 * 94 002 * 68     JUMP IF NO FRACTIONAL PART
D004E634     * 64 020 A 27 050 P 11
D004E636          020 $  0 010 = 66     INSERT DECIMAL POINT
D004E638          020 * 94 050 H 20
D004E640          020 $  0 010 = 36     CONVERT FRACTIONAL PART
D004E642     * 62        4     ----
D004E644          010 * 68              JUMP TO PUT IN CR+EOM
D004E646     * 63 020 I  8 025 * 94
D004E647          056 * 62 010 $  1
D004E648          020 H 30 124 K 13
D004E650          050 * 94 010 * 64
D004E652     * 65 020 $  0 010 = 64     SCIENTIFIC NOTATION
D004E653              * 96     * 96     INSERT 5 SPACE
D004E654          020 H 30 124 K 12
D004E655          025 K 12 001 * 66     JUMP IF NO MINUS SIGN
D004E656          020 A 44 014 * 66     INSERT MINUS
D004E658     * 66 020 A 14 050 P 11     INSERT SPACE
D004E660          020 $  0 010 = 66
D004E662          020 H 30 124 K 13
D004E664          071   40 044 N  8
D004E666          050 * 93 060 H 20
D004E668          020 $  0 010 = 36     CONVERT WHOLE NUMBER OF COEF
D004E670                 1        1
D004E671          023 * 93 002 * 70     JUMP IF NO FRACTIONAL PART
D004E672          020 A 27 050 P 11
D004E674          020 $  0 010 = 66     INSERT DECIMAL PT
D004E676          020 * 93 050 H 20
D004E678          020 $  0 010 = 36     CONVERT FRACTION OF COEF
D004E680                 4        8
D004E682     * 70 020 $  0 010 = 64     INSERT .10*
D004E684              * 95     * 95
D004E686          020 * 94 006 * 67     JUMP IF SFX PLUS
D004E688          020 A 73 050 P 11     INSERT (
D004E690          020 $  0 010 = 66
D004E692          020 A 44 050 P 11     INSERT -

D004E694          020 $  0 010 = 66
D004E696     * 67 021 * 94 050 H 20
D004E698          020 $  0 010 = 36     CONVERT SFX
D004E700                 1        2
D004E702          020 * 94 002 * 68     JUMP IF SFX PLUS
D004E704          020 A112 050 P 11     INSERT )
D004E706          020 $  0 010 = 66
D004E708     * 68 020 A 42 050 P 11     INSERT CR+EOM
D004E710          020 $  0 010 = 66
D004E712          020 P 15 001 * 72     JUMP IF NO INTERRUPT
D004E713          020 H 12 024 K 32     FAKE AN 'RI'
D004E714          050 H  9 010 X 10       IN H9 AND JUMP
D004E715     * 72 020 P 31 010 = 78     TRANSMIT (PASS LINK ON TO =80)
D004E716     * 90     A 17     A 17
D004E718     * 91     A122     A122
D004E720     * 92+          10   27
D004E722     * 93                       LOCAL STORAGE
D004E724     * 94                       LOCAL STORAGE
D004E726     * 95 020,0011,407,6200     .10*
D004E728     * 96 007,0160,340,7016     FIVE SPACES
D004E730          100,0000,000,0000,
D004E999        /     D  4 010,7000/


D005E000+       $              M  0     OCTAL IN AND OUT
D005E010          020 $  0 010 =  1
D005E020          020 P  1 124 A 14
D005E030          025 A 14 001 E  6
D005E040          020 $  0 010 =  1
D005E050          020 P  1 124 A 61
D005E060          025 A 61 001 E  6
D005E065          020 $  0 010 =  1
D005E070          120    0 050 P 18
D005E080     *  0 020 P  1 124 K 35
D005E090          025 K 35 001 *  4
D005E100          020 P  1 072    3
D005E110          020 P 18 077    3
D005E120          050 P 18 010 $  1
D005E130          020 $  0 010 =  1
D005E140          010 *  0
D005E150     *  4 020 $  0 010 =  3
D005E160          001 * 10 010 $  1
D005E170          120    0 050 P 19
D005E180     *  1 020 P  1 124 K 35
D005E190          025 K 35 001 *  2
D005E200          020 P  1 072    3
D005E210          020 P 19 077    3
D005E220          050 P 19 010 $  1
D005E230          020 $  0 010 =  2
D005E240          010 *  1
D005E250     *  2 020 P 18 056 *  3
D005E260     *  3 020 P 19 050 ----
D005E270          014 X 12
D005E280     * 10 020 P 18 056 * 11
D005E290     * 11          020 ----
D005E300          050 P 19 010 $  1
D005E310          020 A 61 050 S  1
D005E320          050 S  3 020 A 14
D005E330          050 S  2 020 S  0
D005E340          024 K 43 050 P 12
D005E360          020 P 18 071   68
D005E370          020 $  0 010 * 50
D005E380                          4
D005E390          020 $  0 010 = 62
D005E400          020 $  0 010 = 62
D005E410          020 P 19 071   38
D005E420          020 $  0 010 * 50
D005E430                          3
D005E440          020 $  0 010 = 62
D005E450          020 $  0 010 * 50
D005E460                          4
D005E470          020 $  0 010 = 62
D005E480          020 $  0 010 * 50
D005E490                          3
D005E500          020 $  0 010 = 62
D005E510          020 P 19 071   68
D005E520          020 $  0 010 * 50
D005E530                          4

D005E540          020 A 42 050 P 11
D005E550          020 $  0 010 = 66
D005E560          010 X 14
D005E570     * 50 024 K  2 052 * 51
D005E580          024 K  2 052 * 59
D005E590     * 51 021 ---- 050 P 27
D005E600     * 53 120    0 075    3
D005E610          025 K  1 002 * 52
D005E620          020 A 48 014 * 52
D005E630     * 52 024 K  1 050 P 11
D005E640          020 $  0 010 = 66
D005E650          020 P 27 024 K  1
D005E660          050 P 27 001 * 53
D005E670     * 59 010 ----         ,
D005E999        /     D005 010,7000/


D006E000+       $              M  0     EXTENSION OF G6 FOR VALUES
D006E005     *  0 020 Q  6 001 X  5     QUIT WHEN Q6-Q7 EMPTY
D006E015          020 Q  7 002 * 20     JUMP IF EXPRESSION + VALUE
D006E020          022 Q  7 001 * 10     JUMP IF -1 FOR BLANK
D006E025          020 Q  7 052 *  1
D006E030     *  1 020 ---- 071    5
D006E035          001 * 40 010 * 30     JUMP IF MATRIX ELSE VECTOR
D006E040     * 10 020 A 42 050 S  1     UNDERLINE CALLS FOR LINE FEED
D006E045          020 $  0 010 = 17     POP Q7
D006E050          020 P 15 002 * 80     JUMP IF INTERRUPT
D006E052     * 11 020 Q  6 001 X 14     EXIT VIA X14 IF LAST ITEM
D006E055          020 $  0 010 = 78     TRANSMIT
D006E060          010 *  0
D006E062     * 20 020 S  0 050 P 12
D006E065          020 Q  7 050 H 30     MOVE VALUE
D006E066          020 $  0 010 = 17     POP Q7
D006E067          020 Q  7 124 K  5
D006E070          025 I  7 002 * 22     JUMP IF EXPRESSION IS 8 OR MORE CHARA
D006E075          020 Q  7 124 K  5
D006E080          025 I  7 050 P 18
D006E085     * 21 020 $  0 010 = 62     INSERT SPACE
D006E090          020 P 18 024 K  1
D006E095          050 P 18 001 * 21     LOOP UNTIL ALL LEADING SPACE INSERTE
D006E100     * 22 020 Q  7 052 * 23
D006E105     * 23 020 ---- 050 P 11
D006E110          020 $  0 010 = 66     INSERT CHARACTER
D006E115          020 * 23 024 K  2
D006E120          052 * 23 020 Q  7
D006E125          124 K  5 025 K  1
D006E130          056 Q  7 002 * 23     LOOP UNTIL EXPRESSION COPIED TO S
D006E135          020 $  0 010 = 17     POP Q7
D006E145          020 $  0 010 * 60     CONVERT VALUE ETC
D006E160          010 * 11
D006E165     * 30 020 Q  7 125 K  4     VECTOR
D006E170          050 P 21 052 * 31
D006E175          020 $  0 010 = 17     POP Q7
D006E180     * 31 020 ---- 050 P 19
D006E185     * 32 020 P 19 056 * 33
D006E190          024 K  1 010 $  1
D006E195     * 33 056 * 34 020 ----
D006E200          001 *  0 010 $  1     JUMP WHEN DONE
D006E205          050 P 19 124 K 42
D006E210     * 34 050 H 28 020 ----
D006E215          050 H 30 010 $  1
D006E220          020 K  4 050 H 29
D006E225          020 $  0 010 * 50     CONVERT LABEL
D006E230          020 $  0 010 * 60     CONVERT VALUE
D006E235          020 $  0 010 = 78     TRANSMIT
D006E240          010 * 32              LOOP
D006E245     * 40 020 Q  7 125 K  4     MATRIX
D006E250          050 P 21 052 * 41
D006E255          020 $  0 010 = 17     POP Q7
D006E260     * 41 020 ---- 050 P 18
D006E265     * 42 020 P 18 056 * 43

D006E270     * 43          020 ----
D006E275          001 *  0 050 P 18     JUMP WHEN DONE
D006E280          050 P 19 010 $  1
D006E285     * 44 020 P 19 052 * 45
D006E290          024 K  2 052 * 46
D006E295     * 45 020 ---- 001 * 42     JUMP IF DONE WITH ROW
D006E300          050 P 19 124 K 42
D006E305          050 H 29 020 P 18
D006E310          124 K 42 050 H 28
D006E315     * 46 020 ---- 050 H 30
D006E320          020 $  0 010 * 50     CONVERT LABEL
D006E325          020 $  0 010 * 60     CONVERT VALUE
D006E330          020 $  0 010 = 78     TRANSMIT
D006E335          010 * 44
D006E340     * 50 024 K  2 052 * 59     CONVERT LABEL SUBROUTINE
D006E342          020 S  0 050 P 12
D006E345          020 H 28 024 * 92     COMPUTE AND INSERT INITIAL SPACES
D006E350          006 * 51 021 I  4
D006E355     * 51 010 * 52 021 I  3
D006E360     * 52 050 * 90 020 H 29
D006E365          001 * 55 025 * 92
D006E370          006 * 53 020 I  2
D006E375     * 53 010 * 54 020 I  3
D006E380     * 54 024 * 90 050 * 90
D006E385     * 55 020 * 90 002 * 56     JUMP WHEN ALL SPACES ARE IN
D006E390          024 I  1 050 * 90
D006E395          020 $  0 010 = 62
D006E400          010 * 55
D006E405     * 56 020 P 21 050 P 11     INSERT LETTER
D006E410          020 $  0 010 = 66
D006E415          020 A 73 050 P 11     INSERT LEFT PARENTHESIS
D006E420          020 $  0 010 = 66
D006E425          020 H 28 070   12
D006E430          050 H 20 010 $  1
D006E435          020 $  0 010 = 36     CONVERT FIRST INDEX
D006E440                 1        2
D006E445          020 H 29 001 * 57     JUMP IF NO SECOND INDEX
D006E450          020 A 59 050 P 11     INSERT COMMA
D006E455          020 $  0 010 = 66
D006E460          020 H 29 070   12
D006E465          050 H 20 010 $  1
D006E470          020 $  0 010 = 36     CONVERT SECOND INDEX
D006E475                 1        2
D006E480     * 57 020 A112 050 P 11
D006E485          020 $  0 010 = 66     INSERT RIGHT PARENTHESIS
D006E490     * 59 010 ----
D006E495     * 60 024 K  2 052 P 26     CONVERT VALUE ETC
D006E500          020 P 15 002 * 80     JUMP IF INTERRUPT
D006E505          020 P 12 025 * 93
D006E510          001 * 61 010 $  1     JUMP IF VALUE WILL FIT ON SAME LINE
D006E515          020 A 42 050 P 11     INSERT CR+EOM
D006E520          020 $  0 010 = 66
D006E522          020 H 30 050 P 30     SAVE VALUE AGAINST POSSIBLE CHOKE
D006E525          020 $  0 010 = 78     TRANSMIT FIRST PART
D006E527          020 P 30 050 H 30     RESTORE VALUE AFTER POSSIBLE CHOKE

D006E530          020 S  0 050 P 12
D006E535          020 $  0 010 = 64
D006E540              * 94     * 94
D006E545     * 61 020 $  0 010 = 62     INSERT SPACE
D006E550          020 A 43 050 P 11     INSERT '='
D006E555          020 $  0 010 = 66
D006E556          020 $  0 010 = 62     INSERT SPACE
D006E560          020 * 96 050 * 90     SET POTENTIAL SIGN POSITION
D006E565          020 H 30 124 K 11
D006E570          071    1 072   32
D006E575          050 * 91 024 I  3
D006E580          001 * 62 025 I  9     JUMP IF SCI NOTATION REQUIRED
D006E585          002 * 62 020 * 91     JUMP IF SCI NOTATION REQUIRED
D006E590          002 * 65 021 I  1
D006E592     * 65 050 T  0 020 * 90     ADJUST SIGN POSITION FOR SCALE FACTOR
D006E594          025 T  0 050 * 90
D006E596          071   21 052 * 90
D006E600     * 62 020 P 12 024 K  3
D006E605          025 * 90 002 * 63     JUMP IF SIGN POSITION IS NEXT
D006E610          020 $  0 010 = 62     INSERT SPACE
D006E615          010 * 62              LOOP
D006E620     * 63 020 H 30 124 K 12
D006E625          025 K 12 001 * 64     JUMP IF PLUS
D006E630          020 A 44 014 * 64     INSERT MINUS
D006E635     * 64 020 A 14 050 P 11     INSERT SPACE
D006E640          020 $  0 010 = 66
D006E642          020 * 91 024 I  3
D006E644          001 * 75 025 I  9     JUMP IF SCI NOTATION REQUIRED
D006E646          002 * 75 010 $  1     JUMP IF SCI NOTATION REQUIRED
D006E650          020 * 91 001 * 73
D006E655          024 I  1 056 * 71
D006E660          020 J 14 025 * 91
D006E665          056 * 70 020 I  8
D006E670          025 * 91 056 * 72
D006E675          020 H 30 124 K 13
D006E680     * 70 071   40 044 ----
D006E685          050 * 91 060 H 20
D006E690          020 $  0 010 = 36     CONVERT INTEGRAL PART
D006E695     * 71        1     ----
D006E700          023 * 91 002 * 78     JUMP IF NO FRACTIONAL PART
D006E705     * 74 020 A 27 050 P 11     INSERT DECIMAL POINT
D006E710          020 $  0 010 = 66
D006E715          020 * 91 050 H 20
D006E720          020 $  0 010 = 36     CONVERT FRACTIONAL PART
D006E725     * 72        4     ----
D006E730          010 * 78              JUMP TO CLOSE LINE
D006E735     * 73 020 I  8 025 * 91
D006E740          056 * 72 020 H 30
D006E745          124 K 13 050 * 91
D006E750     * 75 010 * 74
D006E775          020 H 30 124 K 13
D006E780          071   40 044 N  8
D006E785          050 * 90 060 H 20
D006E790          020 $  0 010 = 36     CONVERT WHOLE NUMBER OF COEF
D006E795                 1        1

D006E797          023 * 90 002 * 79     JUMP IF NO FRACTIONAL PART
D006E800          020 A 27 050 P 11     INSERT DECIMAL PT
D006E805          020 $  0 010 = 66
D006E810          020 * 90 050 H 20
D006E815          020 $  0 010 = 36     CONVERT FRACTION OF COEF
D006E820                 4        8
D006E825     * 79 020 $  0 010 = 64     INSERT .10*
D006E830              * 95     * 95
D006E835          020 * 91 006 * 77     JUMP IF SFX PLUS
D006E840          020 A 73 050 P 11     INSERT (
D006E845          020 $  0 010 = 66
D006E850          020 A 44 050 P 11     INSERT -
D006E855          020 $  0 010 = 66
D006E860     * 77 021 * 91 050 H 20
D006E865          020 $  0 010 = 36     CONVERT SFX
D006E870                 1        2
D006E875          020 * 91 002 * 78     JUMP IF SFX PLUS
D006E880          020 A112 050 P 11     INSERT )
D006E885          020 $  0 010 = 66
D006E890     * 78 020 A 42 050 P 11     INSERT CR+EOM
D006E895          020 $  0 010 = 66
D006E900          010 P 26              EXIT VIA P26
D006E902     * 81 020 $  0 010 = 17     POP Q6-Q7
D006E904     * 80 020 Q  6 002 * 81     JUMP IF Q6 HAS SOMETHING
D006E906          020 H 12 024 K 32     FAKE AN 'RI'
D006E908          050 H  9 010 X 10       IN H9 AND JUMP
D006E910     * 90                       LOCAL STORAGE
D006E915     * 91                       LOCAL STORAGE
D006E920     * 92+          10   27
D006E925     * 93     S 50     S 50
D006E930     * 94 007,0160,340,7016     EIGHT SPACE MSG
D006E935          007,0160,350,0000
D006E940     * 95 020,0011,407,6200     .10*
D006E945     * 96     S 17     S 17,
D006E999        /     D006 010,7000/

